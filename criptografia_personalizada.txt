public class Criptografia {

public static void main(String[] args) {
	String palavraOriginal = "unip";
	criptografar(palavraOriginal);

}


 public static void criptografar(String palavraOriginal) {
 
	/* 1º passo - Converter cada letra da palavra original
	*  em sua respectiva representação ASCII;
	   * Cada letra na forma ASCII será uma posição do array */
	int[] representacaoASCII = converterPalavraParaASCII(palavraOriginal);
	 System.out.println("Passo 1: " + palavraOriginal);
	
	/* 2º passo - Converter cada posição de ASCII para a representação em bytes; */
	String[] representacaoBytes = converterASCIIparaBinario(representacaoASCII);
	
	String aux = "[";
	for(String i: representacaoBytes) {
		aux = aux + i + ",";
	}
	aux.substring(aux.length()-2, aux.length());
	aux += "]";
	 System.out.println("\n\nPasso 2:" + aux);
	 
	/* 3º passo - Inserir 0's em cada posição do array até todas tiverem 8 bits cada */
	String[] representacaoBytesFormatada = formatarArrayBytes(representacaoBytes);
	aux = "[";
	for(String i: representacaoBytesFormatada) {
		aux = aux + i + ",";
	}
	
	aux.substring(aux.length()-2, aux.length());
	aux += "]";
	System.out.println("\n\nPasso 3:" + aux);
	/* 4º passo - Unir todas as posições do array e acrescentar 1 ao final; */
	String representacaoCompleta = unirArrayBytes(representacaoBytesFormatada);
	
	System.out.println("\n\nPasso 4:" + representacaoCompleta);
	
	/* 5º passo - Adicionar zeros até o tamanho da String ser 448 mod 512  - (Tamanho 448)*/
	representacaoCompleta = adicionarZeros(representacaoCompleta);
	
	
	/* 6º passo - Pega o array do passo 3 e junta suas posições numa só string  
	 * Pega o tamanho do array resultante  
	 * Converte esse tamanho em bits
	 */
	String tamanhoArrayEmBinario = getTamanhoArrayEmBinario(representacaoBytesFormatada);
	
	/* 7º passo - Os bits do passo anterior será acrescido de zeros
	 * até ter o tamanho de 64 caracteres
	 */
	String tamanhoArrayEmBinario64Caracteres = adicionarZerosAte64Caracteres(tamanhoArrayEmBinario);
	System.out.println("\n\nPasso 7:" + tamanhoArrayEmBinario64Caracteres);
	/* 8º passo - Une a String do passo 5 com a String do passo 7 */
	representacaoCompleta += tamanhoArrayEmBinario64Caracteres;
	System.out.println("\n\nPasso 8:" + representacaoCompleta);
	/* 9º passo - Separa a String em 16 pedaços de 32 bits cada
	 * O algoritmo original cria 80 pedaços (chunks) */
	String[] arrayChunks = converterStringArray(representacaoCompleta);
	
	/* 10º passo - Criar 5 variáveis com 32 bits aleatórios cada
	*  Essas variáveis passarão por várias operações lógicas bit a bit,
	*  operações de concatenação entre elas e os chunks criados com a palavra
	*  original - logo em seguida, formarão o hash após conversão hexadecimal
	*/
	
	String a = "10010101010001100101010000010110";
	String b = "10110010000011001100100010111111";
	String c = "10111110100010000101011010101000";
	String d = "11010100010100001010111111000010";
	String e = "11110010010010101010101101101101";
	
	String subString0 = arrayChunks[0].substring(22, 24);
	String subString1 = arrayChunks[0].substring(5, 9);
	String subString2 = arrayChunks[0].substring(0, 6);
	String subString3 = arrayChunks[0].substring(21, 25);
	String subString4 = arrayChunks[0].substring(19, 22);
	String subString5 = arrayChunks[0].substring(12, 15);
	String subString6 = arrayChunks[0].substring(16, 19);
	String subString7 = arrayChunks[0].substring(26, 32);
	String subString8 = arrayChunks[0].substring(20, 21);
	
	String stringMisturada = subString8 + subString2 + subString3 + subString6 + subString1 + subString4 + subString5 + subString0 + subString7;
	
	/*11º passo - Operações de bitwise, de mescla e outras operações aleatórias
	 entre as variáveis inicializadas e cada chunk
	 As operações realizadas aqui são personalizadas,
	 diferentes das originais utilizadas pelo SHA-1*/

	
	/* Disjunção exclusiva exclusiva para cada posição do array
	 * seguido de mescla entre as próprias variáveis */
	for(int i = 0; i < 16; i++) {
	
	String temp1 = "10011111011010111010100001101001";
	String temp2 = "01110011010010101010111010111101";
	
	a = disjuncaoExclusiva(arrayChunks[i], a);
	
	if(i == 16)
		arrayChunks[i] = temp1;
	
	b = disjuncaoExclusiva(arrayChunks[i], c);
	c = disjuncaoExclusiva(arrayChunks[i], b);
	d = disjuncaoExclusiva(a, temp2);

	if(i == 6)
		arrayChunks[i] = temp2;
 
	if(i > 10) {
		a = ouExclusivo(a, temp1);
		d = ouExclusivo(a,d);
	}

	e = inverterBit(e);
	
	d = ouExclusivo(d,temp1);
	b = ouExclusivo(a,arrayChunks[0]);
	c = ouExclusivo(temp2,b);
	
	d = disjuncaoExclusiva(e, a);
	e = disjuncaoExclusiva(a, b);
	e = disjuncaoExclusiva(d, e);
	a = disjuncaoExclusiva(a, stringMisturada);


	}
	
	/*Converte as variáveis modificadas em hexadecimal e
	 *  concatena gerando a criptografia final */
	
	String palavraCriptografada = "";
	palavraCriptografada += converterParaHexadecimal(a);
	palavraCriptografada += converterParaHexadecimal(b);
	palavraCriptografada += converterParaHexadecimal(c);
	palavraCriptografada += converterParaHexadecimal(d);
	palavraCriptografada += converterParaHexadecimal(e);
	
	System.out.println("\n\nPasso11:" + representacaoCompleta);
	System.out.println("\n\nFinal:" + palavraCriptografada);
}
 
 
 public static int[] converterPalavraParaASCII(String palavraOriginal) {
	 int[] representacaoASCII = new int[palavraOriginal.length()];  
 
	for(int i = 0; i<palavraOriginal.length(); i++) {
		//adiciona ao array a representação ASCII do caracter
		representacaoASCII[i] = (int) palavraOriginal.charAt(i);
	}
	return representacaoASCII;
 }
 
 
	 public static String[] converterASCIIparaBinario(int[] palavraASCII) {
	 //Inicializando o array de bytes com o tamanho do numero de letras da palavra original
		 String[] representacaoBytes = new String[palavraASCII.length];
		 
		 for(int i = 0; i<palavraASCII.length; i++) {
			 //adicionando representação em binário para cada caracter
			 String valorByte = Integer.toBinaryString(palavraASCII[i]);
			 representacaoBytes[i] = valorByte;
		 }
		 return representacaoBytes;  
	 }
 
 
 //Adiciona zeros a esquerda para cada posição do array
 public static String[] formatarArrayBytes(String[] arrayBytes) {
 
	 for(int i = 0; i < arrayBytes.length; i++) {
	 
		 int zerosRestantes = 8 - arrayBytes[i].length();
		 
		 //Insere zeros ate cada posição do array tiver 8 bits
		 if(zerosRestantes > 0) {
			 StringBuilder builder = new StringBuilder(arrayBytes[i]);
			 
		 for(int j = 0; j < zerosRestantes; j++) {
		 
			 builder.insert(0, '0');
		 
		 }
		 arrayBytes[i] = builder.toString();
		 }  
	 }
	return arrayBytes;
 }
 
	 // Faz o join do array e adiciona o bit 1 ao final
	 public static String unirArrayBytes(String[] arrayOriginal) {
		 StringBuilder sb = new StringBuilder();
		 for(String iterator : arrayOriginal) {
			 sb.append(iterator);  
		 }
		 return sb.append("1").toString();
	 }
 
 
	 //Adiciona zeros a direita
	 public static String adicionarZeros(String representacao) {
		 while(representacao.length() % 512 != 448) {
		 	representacao += "0";
		 }
		 return representacao;
	 }
	 
	 // Faz o join do array e converte seu tamanho em binário
	 public static String getTamanhoArrayEmBinario(String[] arrayString){
		 StringBuilder sb = new StringBuilder();
		 for(String iterator : arrayString) {
			 	sb.append(iterator);  
		 }
		 return Integer.toBinaryString(sb.toString().length());
	 }
		 
	 //Adiciona zeros a esquerda até a string ter 64 caracteres
	 public static String adicionarZerosAte64Caracteres(String tamanhoArrayMenor) {
		 StringBuilder sb = new StringBuilder(tamanhoArrayMenor);
		 while(sb.toString().length() < 64) {
			 	sb.insert(0,"0");
		 }
		 return sb.toString();  
	 }
 
	 public static String[] converterStringArray(String stringCompleta) {
		 String[] arrayChunks = new String[16];
		 int inicioSubstring = 0;
		 int fimSubstring = 32;
		 int i = 0;
		 StringBuilder sb = new StringBuilder(stringCompleta);
		 while(fimSubstring <= 512) {
	 
			 arrayChunks[i] = sb.substring(inicioSubstring, fimSubstring);
	 
			 if(inicioSubstring == 0)
				 inicioSubstring = 32;
			 else
				 inicioSubstring += 32;
	 
			 fimSubstring += 32;
			 i++;
		 }
	
		 return arrayChunks;
	 }
 
	 /* Recebe duas String de 32 bits e realiza operações bit a bit de acordo com
	  * a tabela verdade de disjunção exclusiva;
	  * A primeira String eh algum chunk da palavra Original e a segunda é a palavra
	  * aleatória declarada
	  * Como retorno apenas uma string que substituirá a palavra declarada original;
	  */
	 public static String disjuncaoExclusiva(String chunk, String palavraDeclarada) {
		 StringBuilder sb = new StringBuilder(palavraDeclarada);
		 for(int i = 0; i < 32; i++) {
			 if(chunk.charAt(i) != palavraDeclarada.charAt(i)) {
			 String novoBit = "0";
			 sb.setCharAt(i, novoBit.charAt(0));  
			 }
			 else {
			 String novoBit = "1";
			 sb.setCharAt(i, novoBit.charAt(0));
			 }
		 }
	
		 return sb.toString();
	 }
 
 
	 public static String ouExclusivo(String chunk, String palavraDeclarada) {
		 StringBuilder sb = new StringBuilder(palavraDeclarada);
		 for(int i = 0; i < 32; i++) {
			 if(chunk.charAt(i) == palavraDeclarada.charAt(i)) {
				 String novoBit = "0";
				 sb.setCharAt(i, novoBit.charAt(0));  
			 }
			 else {
				 String novoBit = "1";
				 sb.setCharAt(i, novoBit.charAt(0));
			 }
		 }
	
		 return sb.toString();
	 }
 
	 // Inverte os bits da palavra original
	 public static String inverterBit(String palavra) {
		 StringBuilder sb = new StringBuilder(palavra);
		 for(int i = 0; i < 32; i++) {
			 if(palavra.charAt(i)== new String("1").charAt(0))
				 sb.setCharAt(i, new String("0").charAt(0));
			 else
				 sb.setCharAt(i, new String("1").charAt(0));
	 	}
		 return sb.toString();
	 }
 
	 public static String converterParaHexadecimal(String stringOriginal) {
		 Long i = Long.parseLong (stringOriginal, 2);
		 return String.format ("%08X", i);
	 }
} 
